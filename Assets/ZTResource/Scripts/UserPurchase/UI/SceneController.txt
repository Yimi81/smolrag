文件源代码内容如下：

using UnityEngine;
using UnityEngine.UI;
using TMPro;
using UnityEngine.SceneManagement;
using System.IO;
using System.Collections.Generic;

public class SceneController : MonoBehaviour
{
    public GameObject searchPanel; // 插槽：搜索页面
    public GameObject purchaseRecordPanel; // 插槽：购买记录页面
    public Image userAvatar; // 插槽：用户头像
    public TMP_Text userName; // 插槽：用户名称
    public Button searchPageButton; // 插槽：搜索页面按钮
    public Button returnToHomePageButton; // 插槽：退回首页按钮
    public Button enterPurchaseRecordButton; // 插槽：进入购买记录页面按钮

    private string currentUserFilePath;

    private void Start()
    {
        LoadUserInfo();
        ShowSearchPanel();

        searchPageButton.onClick.AddListener(ShowSearchPanel);
        returnToHomePageButton.onClick.AddListener(ReturnToHomePage);
        enterPurchaseRecordButton.onClick.AddListener(ShowPurchaseRecordPanel);
    }
    // 这个脚本的目的是加载用户信息，包括用户名和用户头像
    private void LoadUserInfo()
    {
        string userKey = PlayerPrefs.GetString("currentUserKey", string.Empty);
        if (!string.IsNullOrEmpty(userKey))
        {
            string folderPath = Path.Combine(Application.dataPath, "ZTResource/UserInfo");
            string fileName = userKey + ".csv";
            currentUserFilePath = Path.Combine(folderPath, fileName);

            if (File.Exists(currentUserFilePath))
            {
                string[] lines = File.ReadAllLines(currentUserFilePath);
                if (lines.Length > 1)
                {
                    string[] data = lines[1].Split(',');
                    string username = data[0];
                    string avatarName = Path.GetFileNameWithoutExtension(data[1]);

                    userName.text = username;
                    string avatarPath = Path.Combine(Application.dataPath, "ZTResource/Resources/ZT_Sprites/ZT_User_Icon", avatarName + ".png");
                    if (File.Exists(avatarPath))
                    {
                        byte[] fileData = File.ReadAllBytes(avatarPath);
                        Texture2D texture = new Texture2D(2, 2);
                        texture.LoadImage(fileData);
                        Sprite avatarSprite = Sprite.Create(texture, new Rect(0, 0, texture.width, texture.height), new Vector2(0.5f, 0.5f));
                        userAvatar.sprite = avatarSprite;
                    }
                    else
                    {
                        Debug.LogError("Avatar sprite not found at path: " + avatarPath);
                    }
                }
                else
                {
                    Debug.LogError("CSV file format is incorrect or empty.");
                }
            }
            else
            {
                Debug.LogError("User CSV file not found: " + currentUserFilePath);
            }
        }
    }


    private void ShowSearchPanel()
    {
        searchPanel.SetActive(true);
        purchaseRecordPanel.SetActive(false);
    }

    private void ShowPurchaseRecordPanel()
    {
        LoadPurchaseRecords(); // 新增方法调用
        searchPanel.SetActive(false);
        purchaseRecordPanel.SetActive(true);
    }

    private void LoadPurchaseRecords()
    {
        var (userName, userAvatar, batches) = CSVParser.ParseCSV(currentUserFilePath);

        // 更新UI逻辑
        // 例如，假设有一个 `MainUIController` 来管理购买记录的UI
        MainUIController mainUIController = purchaseRecordPanel.GetComponent<MainUIController>();
        if (mainUIController != null)
        {
            mainUIController.SetupPurchaseRecords(userName, userAvatar, batches, currentUserFilePath); // 传递CSV文件路径
        }
    }

    private void ReturnToHomePage()
    {
        SceneManager.LoadScene("Assets/ZTResource/ZTResource_Home.unity");
    }
}

源代码内容解释如下：
### 1. 功能概览

**功能定位：**  
`SceneController` 类主要用于管理场景中的用户界面（UI）交互和用户信息的加载与显示。它负责控制不同面板（如搜索页面、购买记录页面）的显示状态，并处理用户头像和名称的加载。

**在系统中的角色和重要性：**  
该类是用户界面管理的核心组件，负责协调用户信息的展示和场景切换。它是用户与系统交互的主要入口，确保用户能够顺利访问不同功能模块。

**主要特性与技术实现方案：**  
- **用户信息加载：** 通过读取CSV文件加载用户名和头像。
- **UI面板控制：** 使用 `SetActive` 方法管理面板的显示状态。
- **场景切换：** 使用 `SceneManager.LoadScene` 实现场景跳转。
- **文件操作：** 利用 `File` 类和 `PlayerPrefs` 进行文件读取和用户数据存储。
- **图像处理：** 将文件中的图像数据转换为 `Sprite` 用于UI显示。

---

### 2. 核心类解析

#### `SceneController`

**职责说明：**  
`SceneController` 的主要职责是管理场景中的UI交互和用户信息的加载与显示。它协调不同面板的显示状态，并处理用户头像和名称的加载。

**关键方法清单：**  
- `private void Start()`: 初始化脚本，加载用户信息并设置初始面板。
- `private void LoadUserInfo()`: 加载并显示用户信息（用户名和头像）。
- `private void ShowSearchPanel()`: 显示搜索页面并隐藏购买记录页面。
- `private void ShowPurchaseRecordPanel()`: 显示购买记录页面并隐藏搜索页面。
- `private void LoadPurchaseRecords()`: 加载购买记录数据并更新UI。
- `private void ReturnToHomePage()`: 切换回首页场景。

**继承关系：**  
```
SceneController -> MonoBehaviour
```

**依赖模块：**  
- `UnityEngine`、`UnityEngine.UI`、`TextMeshPro`、`UnityEngine.SceneManagement`、`System.IO`：Unity内置模块。
- `CSVParser`：用于解析CSV文件的类。
- `MainUIController`：用于管理购买记录UI的类。

---

### 3. 关键方法详解

#### `private void Start()`

**方法签名：**  
```csharp
private void Start()
```

**功能描述：**  
在场景加载时初始化脚本，执行以下操作：  
1. 加载用户信息（用户名和头像）。  
2. 显示搜索页面。  
3. 为按钮添加点击事件监听器，分别绑定到 `ShowSearchPanel`、`ReturnToHomePage` 和 `ShowPurchaseRecordPanel` 方法。

**算法说明：**  
该方法通过调用其他方法完成初始化，逻辑简单但功能集中。

**调用关系：**  
- 被Unity引擎自动调用（生命周期方法）。

---

#### `private void LoadUserInfo()`

**方法签名：**  
```csharp
private void LoadUserInfo()
```

**功能描述：**  
从本地存储中读取用户信息并显示在UI上。具体步骤如下：  
1. 从 `PlayerPrefs` 中获取当前用户的标识符（`userKey`）。  
2. 根据 `userKey` 构建用户信息文件路径。  
3. 读取CSV文件中的用户名和头像名称。  
4. 加载并显示用户名和头像。

**算法说明：**  
- 使用 `File.ReadAllLines` 读取CSV文件内容。  
- 解析第二行数据（假设CSV文件格式为 `用户名,头像文件名`）。  
- 将头像文件路径转换为 `Sprite` 对象，并将其赋值给 `userAvatar`。

**调用关系：**  
- 被 `Start()` 方法调用。

---

#### `private void ShowSearchPanel()`

**方法签名：**  
```csharp
private void ShowSearchPanel()
```

**功能描述：**  
显示搜索页面并隐藏购买记录页面。  
- `searchPanel.SetActive(true)`：显示搜索页面。  
- `purchaseRecordPanel.SetActive(false)`：隐藏购买记录页面。

**算法说明：**  
简单地通过 `SetActive` 方法控制面板的显示状态。

**调用关系：**  
- 被 `Start()` 方法调用。  
- 被 `searchPageButton` 按钮的点击事件调用。

---

#### `private void ShowPurchaseRecordPanel()`

**方法签名：**  
```csharp
private void ShowPurchaseRecordPanel()
```

**功能描述：**  
显示购买记录页面并隐藏搜索页面。  
- `LoadPurchaseRecords()`：加载购买记录数据。  
- `searchPanel.SetActive(false)`：隐藏搜索页面。  
- `purchaseRecordPanel.SetActive(true)`：显示购买记录页面。

**算法说明：**  
调用 `LoadPurchaseRecords()` 方法加载并解析购买记录数据，然后切换面板显示状态。

**调用关系：**  
- 被 `enterPurchaseRecordButton` 按钮的点击事件调用。

---

#### `private void LoadPurchaseRecords()`

**方法签名：**  
```csharp
private void LoadPurchaseRecords()
```

**功能描述：**  
加载并解析用户的购买记录数据，更新UI显示。  
- 调用 `CSVParser.ParseCSV` 方法解析CSV文件。  
- 将解析结果传递给 `MainUIController` 以更新UI。

**算法说明：**  
假设 `CSVParser.ParseCSV` 方法返回一个包含用户名、用户头像和购买记录批次的数据结构。数据被传递给 `MainUIController` 以更新购买记录页面的UI。

**调用关系：**  
- 被 `ShowPurchaseRecordPanel()` 方法调用。

---

#### `private void ReturnToHomePage()`

**方法签名：**  
```csharp
private void ReturnToHomePage()
```

**功能描述：**  
加载首页场景。  
- 使用 `SceneManager.LoadScene` 方法加载指定场景。

**算法说明：**  
直接调用Unity的场景管理功能，实现场景跳转。

**调用关系：**  
- 被 `returnToHomePageButton` 按钮的点击事件调用。

---

### 4. 架构关系图

```mermaid
classDiagram

    class SceneController {
        +void Start()
        +void LoadUserInfo()
        +void ShowSearchPanel()
        +void ShowPurchaseRecordPanel()
        +void LoadPurchaseRecords()
        +void ReturnToHomePage()
        +GameObject searchPanel
        +GameObject purchaseRecordPanel
        +Image userAvatar
        +TMP_Text userName
        +Button searchPageButton
        +Button returnToHomePageButton
        +Button enterPurchaseRecordButton
        +string currentUserFilePath
    }

    class MonoBehaviour {
        // 基类，包含生命周期方法
    }

    class MainUIController {
        +void SetupPurchaseRecords(string, string, object, string)
    }

    class CSVParser {
        +static (string, string, object) ParseCSV(string)
    }

    SceneController --> MonoBehaviour
    SceneController --> MainUIController
    SceneController --> CSVParser
```