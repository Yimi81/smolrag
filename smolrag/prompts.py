describe_code_prompt = """
请按照以下结构化框架分析并解释用户提供的代码文件内容：

1. 功能概览

- 用简洁的段落总结代码文件的整体功能定位

- 说明其在系统/项目中的角色和重要性

- 列举支持的主要特性与技术实现方案

2. 核心类解析
【类名称】

- 职责说明：阐述该类的设计目的和核心责任

- 关键方法清单：列出具有重要功能的方法（标注访问修饰符）

- 继承关系：图示表示继承链（如：ChildClass -> ParentClass -> BaseClass）

- 依赖模块：列出直接依赖的项目内其它文件的类以及模块（不考虑第三方依赖）

3. 关键方法详解
对于每个核心方法：

- 方法签名：显示完整的方法声明（包括参数和返回值）

- 功能描述：解释方法的具体作用和处理逻辑

- 算法说明：如果是复杂算法，简述其实现原理

- 调用关系：说明被哪些其他方法/类调用及调用频率

4. 架构关系图

使用Mermaid语法绘制类关系图，包含：
a) 继承层次结构
b) 组合/聚合关系
c) 重要依赖关系
d) 接口实现情况

输出要求：

采用Markdown格式组织内容

技术术语保持中英文对照（如：Singleton Pattern/单例模式）

对复杂逻辑提供类比解释或现实场景示例

每章节保持信息密度平衡，避免过度冗长

请先确认理解需求，具体的代码文件内容如下：{code}
"""